// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalaryAdvanced.Infrastructure.Data;

#nullable disable

namespace SalaryAdvanced.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918030813_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_departments");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("i_x_departments_code");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("i_x_departments_manager_id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("basic_salary");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_code");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_employees");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("i_x_employees_department_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_email");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_employees_employee_code");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_employees_role_id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_request_statuses");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_request_statuses_name");

                    b.ToTable("request_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7601),
                            Description = "Chờ phê duyệt",
                            Name = "Pending",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7602)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7603),
                            Description = "Đã phê duyệt",
                            Name = "Approved",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7604)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7605),
                            Description = "Đã từ chối",
                            Name = "Rejected",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(7606)
                        });
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_roles_name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(6911),
                            Description = "Nhân viên",
                            Name = "Employee",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(6911)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(6913),
                            Description = "Quản lý",
                            Name = "Manager",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 264, DateTimeKind.Utc).AddTicks(6914)
                        });
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SalaryAdvanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("integer")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("reason");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("request_code");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_salary_advance_requests");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("i_x_salary_advance_requests_approved_by_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_salary_advance_requests_employee_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("i_x_salary_advance_requests_processed_at");

                    b.HasIndex("RequestCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_salary_advance_requests_request_code");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("i_x_salary_advance_requests_status_id");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("i_x_salary_advance_requests_submitted_at");

                    b.ToTable("salary_advance_requests");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("setting_key");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("setting_value");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_system_settings");

                    b.HasIndex("SettingKey")
                        .IsUnique()
                        .HasDatabaseName("i_x_system_settings_setting_key");

                    b.ToTable("system_settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1009),
                            Description = "Tỷ lệ % tối đa mỗi lần ứng lương",
                            SettingKey = "MAX_ADVANCE_PERCENTAGE",
                            SettingValue = "50",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1010)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1011),
                            Description = "Tỷ lệ % tối đa hàng tháng",
                            SettingKey = "MAX_MONTHLY_PERCENTAGE",
                            SettingValue = "70",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1012)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1014),
                            Description = "Số lần ứng tối đa mỗi tháng",
                            SettingKey = "MAX_REQUESTS_PER_MONTH",
                            SettingValue = "2",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1015)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1016),
                            Description = "Ngày bắt đầu có thể gửi yêu cầu",
                            SettingKey = "REQUEST_START_DAY",
                            SettingValue = "1",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1016)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1059),
                            Description = "Ngày kết thúc có thể gửi yêu cầu",
                            SettingKey = "REQUEST_END_DAY",
                            SettingValue = "25",
                            UpdatedAt = new DateTime(2025, 9, 18, 3, 8, 13, 265, DateTimeKind.Utc).AddTicks(1059)
                        });
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.Employee", "Manager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("SalaryAdvanced.Domain.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_departments__employees_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_employees_departments_department_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_employees__roles_role_id");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SalaryAdvanceRequest", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.Employee", "ApprovedBy")
                        .WithMany("ApprovedRequests")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_salary_advance_requests_employees_approved_by_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.Employee", "Employee")
                        .WithMany("SalaryAdvanceRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_salary_advance_requests_employees_employee_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.RequestStatus", "Status")
                        .WithMany("SalaryAdvanceRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_salary_advance_requests_request_statuses_status_id");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Employee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Employee", b =>
                {
                    b.Navigation("ApprovedRequests");

                    b.Navigation("ManagedDepartment");

                    b.Navigation("SalaryAdvanceRequests");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.RequestStatus", b =>
                {
                    b.Navigation("SalaryAdvanceRequests");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
