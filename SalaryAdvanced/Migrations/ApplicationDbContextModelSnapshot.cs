// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalaryAdvanced.Infrastructure.Data;

#nullable disable

namespace SalaryAdvanced.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("p_k_application_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_application_role_claims_role_id");

                    b.ToTable("application_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_application_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_application_user_claims_user_id");

                    b.ToTable("application_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("p_k_application_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("i_x_application_user_logins_user_id");

                    b.ToTable("application_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("p_k_application_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("i_x_application_user_roles_role_id");

                    b.ToTable("application_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("p_k_application_user_tokens");

                    b.ToTable("application_user_tokens", (string)null);
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("p_k_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("application_roles", (string)null);
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("basic_salary");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("employee_code");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("hire_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("p_k_application_users");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("i_x_application_users_department_id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_application_users_employee_code");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_departments");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("i_x_departments_code");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasDatabaseName("i_x_departments_manager_id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_request_statuses");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("i_x_request_statuses_name");

                    b.ToTable("request_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(441),
                            Description = "Chờ phê duyệt",
                            Name = "Pending",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(442)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(443),
                            Description = "Đã phê duyệt",
                            Name = "Approved",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(444)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(445),
                            Description = "Đã từ chối",
                            Name = "Rejected",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(446)
                        });
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SalaryAdvanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("integer")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("reason");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("request_code");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_salary_advance_requests");

                    b.HasIndex("ApprovedById")
                        .HasDatabaseName("i_x_salary_advance_requests_approved_by_id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("i_x_salary_advance_requests_employee_id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("i_x_salary_advance_requests_processed_at");

                    b.HasIndex("RequestCode")
                        .IsUnique()
                        .HasDatabaseName("i_x_salary_advance_requests_request_code");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("i_x_salary_advance_requests_status_id");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("i_x_salary_advance_requests_submitted_at");

                    b.ToTable("salary_advance_requests");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("setting_key");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("setting_value");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_system_settings");

                    b.HasIndex("SettingKey")
                        .IsUnique()
                        .HasDatabaseName("i_x_system_settings_setting_key");

                    b.ToTable("system_settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4051),
                            Description = "Tỷ lệ % tối đa mỗi lần ứng lương",
                            SettingKey = "MAX_ADVANCE_PERCENTAGE",
                            SettingValue = "50",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4051)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4053),
                            Description = "Tỷ lệ % tối đa hàng tháng",
                            SettingKey = "MAX_MONTHLY_PERCENTAGE",
                            SettingValue = "70",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4053)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4055),
                            Description = "Số lần ứng tối đa mỗi tháng",
                            SettingKey = "MAX_REQUESTS_PER_MONTH",
                            SettingValue = "2",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4056)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4058),
                            Description = "Ngày bắt đầu có thể gửi yêu cầu",
                            SettingKey = "REQUEST_START_DAY",
                            SettingValue = "1",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4059)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4060),
                            Description = "Ngày kết thúc có thể gửi yêu cầu",
                            SettingKey = "REQUEST_END_DAY",
                            SettingValue = "25",
                            UpdatedAt = new DateTime(2025, 9, 18, 4, 21, 30, 805, DateTimeKind.Utc).AddTicks(4060)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_role_claims_application_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_user_claims_application_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_user_logins_application_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_user_roles_application_roles_role_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_user_roles_application_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_application_user_tokens_application_users_user_id");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_application_users__departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", "Manager")
                        .WithOne("ManagedDepartment")
                        .HasForeignKey("SalaryAdvanced.Domain.Entities.Department", "ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_departments_application_users_manager_id");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.SalaryAdvanceRequest", b =>
                {
                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", "ApprovedByUser")
                        .WithMany("ApprovedRequests")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_salary_advance_requests_application_users_approved_by_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("SalaryAdvanceRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_salary_advance_requests_application_users_employee_id");

                    b.HasOne("SalaryAdvanced.Domain.Entities.RequestStatus", "Status")
                        .WithMany("SalaryAdvanceRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("f_k_salary_advance_requests_request_statuses_status_id");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApprovedRequests");

                    b.Navigation("ManagedDepartment");

                    b.Navigation("SalaryAdvanceRequests");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SalaryAdvanced.Domain.Entities.RequestStatus", b =>
                {
                    b.Navigation("SalaryAdvanceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
