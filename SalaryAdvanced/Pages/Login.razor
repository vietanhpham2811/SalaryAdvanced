@page "/login"
@using SalaryAdvanced.Application.DTOs
@using SalaryAdvanced.Application.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Login - Salary Advanced System</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="row w-100 justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header bg-primary text-white text-center py-4">
                    <h3 class="fw-light mb-3">Login</h3>
                    <small>Salary Advanced System</small>
                </div>
                
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="ClearError"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @successMessage
                            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
                        </div>
                    }

                    <form method="post" action="/login">
                        <div class="form-floating mb-3">
                            <input name="Email" 
                                   value="@loginModel.Email" 
                                   @oninput="@((e) => loginModel.Email = e.Value?.ToString() ?? "")"
                                   class="form-control" 
                                   id="inputEmail" 
                                   placeholder="tungctd.trial1@digitechs.vn" 
                                   required />
                            <label for="inputEmail">
                                <i class="fas fa-envelope me-2"></i>Email
                            </label>
                        </div>

                        <div class="form-floating mb-3 position-relative">
                            <input name="Password" 
                                   type="@(showPassword ? "text" : "password")" 
                                   value="@loginModel.Password"
                                   @oninput="@((e) => loginModel.Password = e.Value?.ToString() ?? "")"
                                   class="form-control pe-5" 
                                   id="inputPassword" 
                                   placeholder="Password"
                                   required />
                            <label for="inputPassword">
                                <i class="fas fa-lock me-2"></i>Password
                            </label>
 
                            <button type="button" 
                                    class="btn btn-link position-absolute top-50 end-0 translate-middle-y me-2 p-0 border-0 bg-transparent text-muted"
                                    style="z-index: 10; width: 24px; height: 24px; margin-top: -8px;"
                                    @onclick="TogglePasswordVisibility"
                                    tabindex="-1">
                                @if (showPassword)
                                {
                                    <i class="fas fa-eye-slash" title="Hide password"></i>
                                }
                                else
                                {
                                    <i class="fas fa-eye" title="Show password"></i>
                                }
                            </button>
                        </div>

                        <div class="form-check mb-3">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   @bind="rememberMe" 
                                   id="inputRememberPassword" />
                            <label class="form-check-label" for="inputRememberPassword">
                                Remember me
                            </label>
                        </div>

                        <input name="ReturnUrl" type="hidden" value="@ReturnUrl" />

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" @onclick="SaveCredentialsBeforeSubmit">
                                <i class="fas fa-sign-in-alt me-2"></i>
                                <span>Login</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private bool rememberMe = false;
    private bool showPassword = false;
    private string? errorMessage = null;
    private string? successMessage = null;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Error { get; set; }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }

        if (!string.IsNullOrEmpty(Error))
        {
            errorMessage = Error;
        }
        await LoadSavedCredentials();
    }

    private async Task LoadSavedCredentials()
    {
        try
        {
            var savedEmail = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "rememberedEmail");
            var savedPassword = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "rememberedPassword");
            var wasRemembered = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "rememberMe");

            if (!string.IsNullOrEmpty(wasRemembered) && wasRemembered.ToLower() == "true")
            {
                rememberMe = true;
                if (!string.IsNullOrEmpty(savedEmail))
                    loginModel.Email = savedEmail;
                if (!string.IsNullOrEmpty(savedPassword))
                    loginModel.Password = savedPassword;
            }
        }
        catch (Exception ex)
        {
            
        }
    }

    private async Task SaveCredentials()
    {
        try
        {
            if (rememberMe)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "rememberedEmail", loginModel.Email);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "rememberedPassword", loginModel.Password);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "rememberMe", "true");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "rememberedEmail");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "rememberedPassword");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "rememberMe");
            }
        }
        catch (Exception ex)
        {
            
        }
    }

    private async Task SaveCredentialsBeforeSubmit()
    {
        await SaveCredentials();
    }

    private bool IsFieldInvalid(string fieldName)
    {
        return false;
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private void ClearSuccess()
    {
        successMessage = null;
    }
}